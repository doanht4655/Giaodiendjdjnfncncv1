import os
import sys
import time
import requests
import random
import json
import tempfile
import hashlib
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, Optional, Any
import subprocess

# ===== M√†u s·∫Øc =====
trang = "\033[1;37m"
xanh_la = "\033[1;32m"
xanh_duong = "\033[1;34m"
xanhnhat = '\033[1m\033[38;5;51m'
do = "\033[1;31m"
xam = '\033[1;30m'
vang = "\033[1;33m"
tim = "\033[1;35m"
hong = "\033[1;95m"
cyan = "\033[1;96m"
dac_biet = "\033[32;5;245m\033[38;5;39m"
vua = f"{do}[{trang}=.{do}] {trang}=> {xanh_la}"

# ===== C·∫•u h√¨nh b·∫£o m·∫≠t =====
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file
ALLOWED_EXTENSIONS = ['.py']  # Ch·ªâ cho ph√©p file Python
REQUEST_TIMEOUT = 30  # Timeout cho requests

# ===== ƒê∆∞·ªùng d·∫´n c∆° s·ªü =====
BASE_URL = "https://raw.githubusercontent.com/doanht4655/Xjcjfjfj/refs/heads/main/"
TOOLS = {
    "1": {"name": "Tool Golike TikTok", "file": "vip.py"},
    "2": {"name": "Tool Thread", "file": "thera.py"},
    "5": {"name": "Tool ƒêƒÉng k√Ω Facebook", "file": "regfb.py"},
    "6": {"name": "Tool Qu·∫£n l√Ω Proxy", "file": "proxy.py"},
    "7": {"name": "Tool Ki·ªÉm tra Proxy", "file": "checkproxy.py"},
    "8": {"name": "Tool Spam", "file": "Spam.py"}
}

# ===== H√†m clear m√†n h√¨nh =====
def clear():
    try:
        os.system('cls' if os.name == 'nt' else 'clear')
    except:
        pass  # B·ªè qua l·ªói n·∫øu kh√¥ng th·ªÉ clear m√†n h√¨nh

# ===== Hi·ªáu ·ª©ng ch·ªØ =====
def print_slow(text, delay=0.005):
    try:
        for char in text:
            print(char, end='', flush=True)
            time.sleep(delay)
        print()
    except KeyboardInterrupt:
        print("\n" + do + "ƒê√£ d·ª´ng hi·ªáu ·ª©ng." + trang)
        print()

# ===== Hi·ªáu ·ª©ng loading =====
def loading_animation(duration=2, text="ƒêang t·∫£i"):
    try:
        chars = "/-\\|"
        end_time = time.time() + duration
        i = 0
        while time.time() < end_time:
            i = (i + 1) % len(chars)
            print(f"\r{xanh_la}{text} {chars[i]}", end="", flush=True)
            time.sleep(0.1)
        print(f"\r{xanh_la}{text} Ho√†n t·∫•t!{trang}     ")
    except KeyboardInterrupt:
        print(f"\r{xanh_la}{text} ƒê√£ d·ª´ng!{trang}      ")

# ===== Ki·ªÉm tra m·∫°ng c·∫£i ti·∫øn =====
def check_internet_connection() -> bool:
    """Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v·ªõi nhi·ªÅu m√°y ch·ªß ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô tin c·∫≠y."""
    test_urls = [
        "https://www.google.com",
        "https://github.com", 
        "https://raw.githubusercontent.com"
    ]
    
    for url in test_urls:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                return True
        except (requests.ConnectionError, requests.Timeout, Exception):
            continue
    return False

# ===== Banner si√™u ƒë·∫πp =====
def banner():
    try:
        clear()
        rainbow_colors = [do, vang, xanh_la, xanhnhat, xanh_duong, tim, hong]
        
        logo = f"""
{random.choice(rainbow_colors)}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
{random.choice(rainbow_colors)}‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó            ‚ïë
{random.choice(rainbow_colors)}‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù     ‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù            ‚ïë
{random.choice(rainbow_colors)}‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó     ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù             ‚ïë
{random.choice(rainbow_colors)}‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó             ‚ïë
{random.choice(rainbow_colors)}‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó            ‚ïë
{random.choice(rainbow_colors)}‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù            ‚ïë
{tim}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
{xanh_duong}‚ïë  {vang}ùì£ùì°ùìêÃÇÃÄùìù ƒêùì§ÃõÃÅùìí ùììùìûùìêùìùùìó   {xanh_duong}|  {cyan}ùïãùïñùïùùïñùïòùï£ùïíùïû: {xanhnhat}https://t.me/doanhvip1  {xanh_duong}‚ïë
{tim}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

{trang}      [{xanhnhat}1{trang}] {xanh_la}Ch·∫°y Tool Golike TikTok {vang}(vip.py)
{trang}      [{xanhnhat}2{trang}] {xanh_la}Ch·∫°y Tool Thread {vang}(thera.py)
{trang}      [{xanhnhat}3{trang}] {xanh_la}Ki·ªÉm tra c·∫≠p nh·∫≠t
{trang}      [{xanhnhat}4{trang}] {xanh_la}Th√¥ng tin t√°c gi·∫£
{trang}      [{xanhnhat}5{trang}] {xanh_la}ƒêƒÉng k√Ω Facebook {vang}(regfb.py)
{trang}      [{xanhnhat}6{trang}] {xanh_la}Qu·∫£n l√Ω Proxy {vang}(proxy.py)
{trang}      [{xanhnhat}7{trang}] {xanh_la}Ki·ªÉm tra Proxy {vang}(checkproxy.py)
{trang}      [{xanhnhat}8{trang}] {xanh_la}C√¥ng c·ª• Spam {vang}(Spam.py)
{trang}      [{xanhnhat}0{trang}] {do}Tho√°t ch∆∞∆°ng tr√¨nh
        """
        print_slow(logo, 0.001)
    except Exception as e:
        print(f"{do}L·ªói khi hi·ªÉn th·ªã banner: {str(e)}")
        print(f"{xanh_la}=== MENU C√îNG C·ª§ TR·∫¶N ƒê·ª®C DOANH ===")
        for key, value in TOOLS.items():
            print(f"{trang}[{xanhnhat}{key}{trang}] {xanh_la}{value['name']} {vang}({value['file']})")
        print(f"{trang}[{xanhnhat}3{trang}] {xanh_la}Ki·ªÉm tra c·∫≠p nh·∫≠t")
        print(f"{trang}[{xanhnhat}4{trang}] {xanh_la}Th√¥ng tin t√°c gi·∫£")
        print(f"{trang}[{xanhnhat}0{trang}] {do}Tho√°t ch∆∞∆°ng tr√¨nh")

# ===== T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i =====
def create_logs_dir():
    try:
        if not os.path.exists("logs"):
            os.makedirs("logs")
    except Exception as e:
        print(f"{do}Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c logs: {str(e)}")

# ===== Ghi log l·ªói =====
def log_error(error_msg):
    try:
        create_logs_dir()
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        with open(os.path.join("logs", "error_log.txt"), "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {error_msg}\n")
    except Exception:
        pass  # B·ªè qua l·ªói khi kh√¥ng th·ªÉ ghi log

# ===== H√†m fix c√°c l·ªói syntax ph·ªï bi·∫øn =====
def fix_common_syntax_errors(content: str) -> str:
    """S·ª≠a c√°c l·ªói syntax ph·ªï bi·∫øn trong code Python."""
    try:
        lines = content.split('\n')
        fixed_lines = []
        
        for line in lines:
            original_line = line
            
            # Fix c√°c l·ªói import ph·ªï bi·∫øn
            fixes = [
                ('importtime import sleep', 'from time import sleep'),
                ('importtime', 'import time'),
                ('importos', 'import os'),
                ('importsys', 'import sys'),
                ('importrandom', 'import random'),
                ('importrequests', 'import requests'),
                ('importjson', 'import json'),
            ]
            
            for wrong, correct in fixes:
                if wrong in line:
                    line = line.replace(wrong, correct)
                    break  # Ch·ªâ fix m·ªôt l·∫ßn per line
            
            # Fix import statements b·ªã d√≠nh nhau
            if line.strip().startswith('import') and ' import ' in line and line != original_line:
                # N·∫øu c√≥ nhi·ªÅu import trong m·ªôt d√≤ng, t√°ch ra
                parts = line.split(' import ')
                if len(parts) > 2:  # import time import sleep
                    # T·∫°o multiple import lines
                    import_lines = []
                    for i, part in enumerate(parts):
                        if i == 0:
                            import_lines.append(part)  # import time
                        else:
                            import_lines.append(f'from {parts[0].replace("import ", "")} import {part}')
                    line = import_lines[0]  # Ch·ªâ l·∫•y import ƒë·∫ßu ti√™n
            
            fixed_lines.append(line)
        
        return '\n'.join(fixed_lines)
    except Exception as e:
        print(f"{vang}L·ªói khi fix syntax: {str(e)}")
        return content  # Tr·∫£ v·ªÅ content g·ªëc n·∫øu kh√¥ng s·ª≠a ƒë∆∞·ª£c

# ===== H√†m x·ª≠ l√Ω file c√≥ v·∫•n ƒë·ªÅ encoding =====
def fix_file_encoding(content: str) -> str:
    """S·ª≠a c√°c v·∫•n ƒë·ªÅ encoding ph·ªï bi·∫øn trong file."""
    try:
        # Lo·∫°i b·ªè BOM n·∫øu c√≥
        if content.startswith('\ufeff'):
            content = content[1:]
        
        # Fix c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c√≥ th·ªÉ g√¢y l·ªói
        content = content.replace('\r\n', '\n')  # Windows line endings
        content = content.replace('\r', '\n')    # Mac line endings
        
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng in ƒë∆∞·ª£c c√≥ th·ªÉ g√¢y l·ªói
        import re
        content = re.sub(r'[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\x84\x86-\x9f]', '', content)
        
        return content
    except Exception:
        return content  # Tr·∫£ v·ªÅ content g·ªëc n·∫øu kh√¥ng s·ª≠a ƒë∆∞·ª£c

# ===== H√†m x√°c th·ª±c file an to√†n =====
def validate_file_content(content: str, file_name: str) -> bool:
    """Ki·ªÉm tra n·ªôi dung file c√≥ an to√†n kh√¥ng."""
    try:
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc
        if len(content.encode('utf-8')) > MAX_FILE_SIZE:
            print(f"{do}File {file_name} qu√° l·ªõn (>{MAX_FILE_SIZE/1024/1024}MB)")
            return False
        
        # Ki·ªÉm tra extension
        if not any(file_name.endswith(ext) for ext in ALLOWED_EXTENSIONS):
            print(f"{do}File {file_name} kh√¥ng c√≥ extension ƒë∆∞·ª£c ph√©p")
            return False
        
        # Ki·ªÉm tra c√°c t·ª´ kh√≥a nguy hi·ªÉm (ch·ªâ nh·ªØng th·ª© th·ª±c s·ª± nguy hi·ªÉm)
        dangerous_keywords = [
            'os.system(', '__import__(', 'eval(', 'exec(open(',
            'subprocess.call', 'subprocess.run', 'subprocess.Popen',
            'execfile(', 'compile(open(', 'importlib.__import__'
        ]
        
        content_lower = content.lower()
        for keyword in dangerous_keywords:
            if keyword.lower() in content_lower:
                print(f"{vang}C·∫£nh b√°o: File ch·ª©a t·ª´ kh√≥a c√≥ th·ªÉ nguy hi·ªÉm: {keyword}")
                # Ch·ªâ warning, kh√¥ng block ho√†n to√†n
        
        # Th·ª≠ compile code ƒë·ªÉ ki·ªÉm tra syntax
        try:
            compile(content, file_name, 'exec')
            return True
        except SyntaxError as e:
            print(f"{vang}C·∫£nh b√°o syntax trong file {file_name}: {str(e)}")
            print(f"{xanh_la}ƒêang th·ª≠ ch·∫°y file d√π c√≥ warning...")
            # Cho ph√©p ch·∫°y d√π c√≥ syntax warning (c√≥ th·ªÉ l√† encoding issue)
            return True
    except Exception as e:
        print(f"{do}L·ªói khi x√°c th·ª±c file {file_name}: {str(e)}")
        return False
def log_activity(activity):
    try:
        create_logs_dir()
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        with open(os.path.join("logs", "activity_log.txt"), "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {activity}\n")
    except Exception:
        pass  # B·ªè qua l·ªói khi kh√¥ng th·ªÉ ghi log

# ===== H√†m t·∫£i v√† ch·∫°y file t·ª´ GitHub c·∫£i ti·∫øn =====
def run_from_github(file_name: str) -> bool:
    """T·∫£i v√† ch·∫°y file t·ª´ GitHub v·ªõi c√°c bi·ªán ph√°p b·∫£o m·∫≠t."""
    url = BASE_URL + file_name
    temp_file = None
    
    try:
        print(f"{xanh_la}ƒêang k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß GitHub...")
        loading_animation(1, "ƒêang k·∫øt n·ªëi")
        
        # T·∫°o session v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
        session = requests.Session()
        session.headers.update({
            'User-Agent': 'Tool-Manager/2.0',
            'Accept': 'text/plain'
        })
        
        # Retry adapter
        adapter = requests.adapters.HTTPAdapter(
            max_retries=requests.packages.urllib3.util.retry.Retry(
                total=3,
                backoff_factor=1,
                status_forcelist=[500, 502, 503, 504]
            )
        )
        session.mount('https://', adapter)
        
        # T·∫£i file v·ªõi timeout
        print(f"{xanh_la}ƒêang t·∫£i {file_name}...")
        response = session.get(url, timeout=REQUEST_TIMEOUT, stream=True)
        response.raise_for_status()
        
        # Ki·ªÉm tra Content-Type
        content_type = response.headers.get('content-type', '').lower()
        if 'text' not in content_type and 'application' not in content_type:
            print(f"{do}File kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng text/python")
            return False
        
        # ƒê·ªçc n·ªôi dung
        content = response.text
        
        # Fix encoding v√† syntax issues
        content = fix_file_encoding(content)
        content = fix_common_syntax_errors(content)
        
        # X√°c th·ª±c n·ªôi dung file
        if not validate_file_content(content, file_name):
            print(f"{vang}File {file_name} c√≥ m·ªôt s·ªë c·∫£nh b√°o nh∆∞ng s·∫Ω ƒë∆∞·ª£c ch·∫°y...")
            # Kh√¥ng return False, ƒë·ªÉ file v·∫´n c√≥ th·ªÉ ch·∫°y
        
        print(f"{xanh_la}File h·ª£p l·ªá, ƒëang chu·∫©n b·ªã ch·∫°y...")
        loading_animation(2, "Kh·ªüi ƒë·ªông c√¥ng c·ª•")
        
        # T·∫°o file t·∫°m th·ªùi an to√†n
        with tempfile.NamedTemporaryFile(
            mode='w', 
            suffix='.py', 
            delete=False,
            encoding='utf-8'
        ) as f:
            f.write(content)
            temp_file = f.name
        
        # Ghi log v√† th·ª±c thi
        log_activity(f"Ch·∫°y tool: {file_name}")
        
        # T·∫°o namespace ri√™ng bi·ªát ƒë·ªÉ th·ª±c thi
        namespace = {
            '__name__': '__main__',
            '__file__': temp_file,
            'print': print,  # Cho ph√©p print
            # C√°c bi·∫øn m√†u s·∫Øc ƒë·ªÉ tool c√≥ th·ªÉ s·ª≠ d·ª•ng
            'trang': trang, 'xanh_la': xanh_la, 'xanh_duong': xanh_duong,
            'do': do, 'vang': vang, 'tim': tim, 'hong': hong, 'cyan': cyan
        }
        
        # Th·ª±c thi code trong namespace ri√™ng
        try:
            with open(temp_file, 'r', encoding='utf-8') as f:
                code = compile(f.read(), temp_file, 'exec')
                exec(code, namespace)
        except SyntaxError as e:
            print(f"{vang}ƒêang th·ª≠ v·ªõi encoding kh√°c do l·ªói syntax...")
            try:
                # Th·ª≠ v·ªõi encoding kh√°c
                with open(temp_file, 'r', encoding='latin-1') as f:
                    content_fixed = f.read()
                    content_fixed = fix_file_encoding(content_fixed)
                    code = compile(content_fixed, temp_file, 'exec')
                    exec(code, namespace)
            except Exception as e2:
                print(f"{do}Kh√¥ng th·ªÉ th·ª±c thi file: {str(e2)}")
                return False
        except Exception as e:
            print(f"{do}L·ªói khi th·ª±c thi: {str(e)}")
            return False
        
        return True
        
    except requests.exceptions.Timeout:
        error_msg = f"Timeout khi t·∫£i {file_name} (>{REQUEST_TIMEOUT}s)"
        print(f"{do}{error_msg}")
        log_error(error_msg)
        return False
    except requests.exceptions.RequestException as e:
        error_msg = f"L·ªói k·∫øt n·ªëi khi t·∫£i {file_name}: {str(e)}"
        print(f"{do}{error_msg}")
        log_error(error_msg)
        return False
    except Exception as e:
        error_msg = f"L·ªói kh√¥ng mong mu·ªën khi ch·∫°y {file_name}: {str(e)}"
        print(f"{do}{error_msg}")
        log_error(error_msg)
        return False
    finally:
        # Lu√¥n x√≥a file t·∫°m sau khi s·ª≠ d·ª•ng
        if temp_file and os.path.exists(temp_file):
            try:
                os.unlink(temp_file)
            except Exception:
                pass

# ===== Ki·ªÉm tra c·∫≠p nh·∫≠t c·∫£i ti·∫øn =====
def check_update() -> None:
    """Ki·ªÉm tra c·∫≠p nh·∫≠t v·ªõi x·ª≠ l√Ω song song v√† b√°o c√°o chi ti·∫øt."""
    print(f"{xanh_la}ƒêang ki·ªÉm tra c·∫≠p nh·∫≠t...")
    loading_animation(2, "Ki·ªÉm tra c·∫≠p nh·∫≠t")
    
    results = {}
    errors = []
    
    def check_file(file_name: str) -> tuple:
        """Ki·ªÉm tra m·ªôt file c·ª• th·ªÉ."""
        try:
            response = requests.head(
                BASE_URL + file_name, 
                timeout=10,
                headers={'User-Agent': 'Tool-Manager/2.0'}
            )
            response.raise_for_status()
            return file_name, {
                'status': 'success',
                'last_modified': response.headers.get('last-modified', 'Kh√¥ng c√≥ th√¥ng tin'),
                'size': response.headers.get('content-length', 'Kh√¥ng r√µ'),
                'etag': response.headers.get('etag', 'Kh√¥ng c√≥')
            }
        except Exception as e:
            return file_name, {'status': 'error', 'error': str(e)}
    
    try:
        file_list = [tool["file"] for tool in TOOLS.values()]
        
        # S·ª≠ d·ª•ng ThreadPoolExecutor v·ªõi context manager ƒë·ªÉ ƒë·∫£m b·∫£o cleanup
        with ThreadPoolExecutor(max_workers=min(6, len(file_list))) as executor:
            # Submit t·∫•t c·∫£ tasks
            future_to_file = {
                executor.submit(check_file, file_name): file_name 
                for file_name in file_list
            }
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ khi ho√†n th√†nh
            for future in as_completed(future_to_file, timeout=30):
                file_name = future_to_file[future]
                try:
                    file_name, result = future.result()
                    if result['status'] == 'error':
                        errors.append(f"{file_name}: {result['error']}")
                    else:
                        results[file_name] = result
                except Exception as e:
                    errors.append(f"{file_name}: L·ªói x·ª≠ l√Ω future - {str(e)}")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        print(f"{xanh_la}Ki·ªÉm tra ho√†n t·∫•t!")
        print(f"{vang}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print(f"{vang}‚ïë {xanh_la}Th√¥ng tin phi√™n b·∫£n v√† tr·∫°ng th√°i:                      {vang}‚ïë")
        print(f"{vang}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
        
        for tool in TOOLS.values():
            file_name = tool["file"]
            tool_name = tool["name"]
            
            if file_name in results:
                info = results[file_name]
                status = f"{xanh_la}‚úì Kh·∫£ d·ª•ng"
                last_modified = info['last_modified']
                size = info.get('size', 'Kh√¥ng r√µ')
                if size != 'Kh√¥ng r√µ':
                    try:
                        size = f"{int(size)/1024:.1f}KB"
                    except:
                        size = "Kh√¥ng r√µ"
            else:
                status = f"{do}‚úó L·ªói"
                last_modified = "Kh√¥ng th·ªÉ ki·ªÉm tra"
                size = "Kh√¥ng r√µ"
            
            print(f"{vang}‚ïë {xanhnhat}{tool_name}: {status} - {trang}{last_modified} ({size}) {vang}‚ïë")
        
        print(f"{vang}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        
        # Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
        if errors:
            print(f"\n{do}M·ªôt s·ªë l·ªói x·∫£y ra trong qu√° tr√¨nh ki·ªÉm tra:")
            for error in errors[:5]:  # Ch·ªâ hi·ªÉn th·ªã 5 l·ªói ƒë·∫ßu ti√™n
                print(f"{do}- {error}")
            if len(errors) > 5:
                print(f"{do}... v√† {len(errors) - 5} l·ªói kh√°c")
        else:
            print(f"\n{xanh_la}T·∫•t c·∫£ c√°c tool ƒë·ªÅu c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c!")
            
    except Exception as e:
        error_msg = f"L·ªói ki·ªÉm tra c·∫≠p nh·∫≠t: {str(e)}"
        print(f"{do}{error_msg}")
        log_error(error_msg)
    
    input(f"\n{vang}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...")

# ===== Th√¥ng tin t√°c gi·∫£ =====
def show_author_info():
    try:
        clear()
        print(f"""{tim}
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë {vang}TH√îNG TIN T√ÅC GI·∫¢                      {tim}‚ïë
        ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
        ‚ïë {xanh_la}T√™n th·∫≠t: {trang}Tr·∫ßn ƒê·ª©c Doanh             {tim}‚ïë
        ‚ïë {xanh_la}Telegram: {xanhnhat}https://t.me/doanhvip1      {tim}‚ïë
        ‚ïë {xanh_la}Version:  {trang}1.2 (N√¢ng c·∫•p 08/08/2025)   {tim}‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
        
        log_activity("Xem th√¥ng tin t√°c gi·∫£")
        input(f"{vang}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...")
    except Exception as e:
        error_msg = f"L·ªói hi·ªÉn th·ªã th√¥ng tin t√°c gi·∫£: {str(e)}"
        print(f"{do}{error_msg}")
        log_error(error_msg)
        input(f"{vang}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...")

# ===== L∆∞u c·∫•u h√¨nh an to√†n =====
def save_config(config: Dict[str, Any]) -> bool:
    """L∆∞u c·∫•u h√¨nh v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n."""
    try:
        # T·∫°o b·∫£n backup tr∆∞·ªõc khi l∆∞u
        config_file = "config.json"
        backup_file = "config.json.backup"
        
        if os.path.exists(config_file):
            try:
                import shutil
                shutil.copy2(config_file, backup_file)
            except Exception:
                pass  # Kh√¥ng quan tr·ªçng n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c backup
        
        # L∆∞u c·∫•u h√¨nh v·ªõi atomic write
        temp_file = config_file + ".tmp"
        with open(temp_file, "w", encoding="utf-8") as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        # Atomic move
        if os.name == 'nt':  # Windows
            if os.path.exists(config_file):
                os.remove(config_file)
        os.rename(temp_file, config_file)
        
        return True
    except Exception as e:
        log_error(f"Kh√¥ng th·ªÉ l∆∞u c·∫•u h√¨nh: {str(e)}")
        # X√≥a temp file n·∫øu c√≥ l·ªói
        temp_file = "config.json.tmp"
        if os.path.exists(temp_file):
            try:
                os.remove(temp_file)
            except:
                pass
        return False

# ===== T·∫£i c·∫•u h√¨nh an to√†n =====
def load_config() -> Dict[str, Any]:
    """T·∫£i c·∫•u h√¨nh v·ªõi fallback v√† validation."""
    config_file = "config.json"
    backup_file = "config.json.backup"
    
    # C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    default_config = {
        "auto_check_update": False,
        "last_used_tool": None,
        "last_check_update": None,
        "theme": "default",
        "language": "vi"
    }
    
    def try_load_file(file_path: str) -> Optional[Dict[str, Any]]:
        """Th·ª≠ t·∫£i file c·∫•u h√¨nh."""
        try:
            if os.path.exists(file_path):
                with open(file_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    if isinstance(data, dict):
                        return data
        except Exception as e:
            log_error(f"Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh t·ª´ {file_path}: {str(e)}")
        return None
    
    # Th·ª≠ t·∫£i file ch√≠nh
    config = try_load_file(config_file)
    
    # N·∫øu th·∫•t b·∫°i, th·ª≠ t·∫£i backup
    if config is None:
        config = try_load_file(backup_file)
        if config is not None:
            print(f"{vang}ƒê√£ kh√¥i ph·ª•c c·∫•u h√¨nh t·ª´ backup")
    
    # N·∫øu v·∫´n th·∫•t b·∫°i, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    if config is None:
        config = default_config.copy()
    else:
        # Merge v·ªõi default config ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë·∫ßy ƒë·ªß keys
        for key, value in default_config.items():
            if key not in config:
                config[key] = value
    
    return config

# ===== Ki·ªÉm tra v√† c√†i ƒë·∫∑t dependencies =====
def check_and_install_dependencies() -> bool:
    """Ki·ªÉm tra v√† c√†i ƒë·∫∑t c√°c module c·∫ßn thi·∫øt."""
    required_modules = {
        "requests": "requests",
        "concurrent.futures": None,  # Built-in t·ª´ Python 3.2+
        "json": None,  # Built-in
        "tempfile": None,  # Built-in
        "hashlib": None,  # Built-in
    }
    
    missing_modules = []
    
    for module_name, pip_name in required_modules.items():
        try:
            __import__(module_name)
        except ImportError:
            if pip_name:  # Ch·ªâ th√™m v√†o danh s√°ch n·∫øu c√≥ th·ªÉ c√†i qua pip
                missing_modules.append(pip_name)
    
    if missing_modules:
        print(f"{vang}ƒêang c√†i ƒë·∫∑t c√°c module c·∫ßn thi·∫øt: {', '.join(missing_modules)}")
        
        for module in missing_modules:
            try:
                print(f"{xanh_la}ƒêang c√†i ƒë·∫∑t {module}...")
                result = subprocess.run(
                    [sys.executable, "-m", "pip", "install", module],
                    capture_output=True,
                    text=True,
                    timeout=60
                )
                
                if result.returncode == 0:
                    print(f"{xanh_la}‚úì ƒê√£ c√†i ƒë·∫∑t {module} th√†nh c√¥ng")
                else:
                    print(f"{do}‚úó L·ªói khi c√†i ƒë·∫∑t {module}: {result.stderr}")
                    return False
                    
            except subprocess.TimeoutExpired:
                print(f"{do}‚úó Timeout khi c√†i ƒë·∫∑t {module}")
                return False
            except Exception as e:
                print(f"{do}‚úó L·ªói kh√¥ng mong mu·ªën khi c√†i ƒë·∫∑t {module}: {str(e)}")
                return False
    
    return True
# ===== Main menu c·∫£i ti·∫øn =====
def main() -> None:
    """Menu ch√≠nh v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n v√† validation input."""
    # T·∫£i c·∫•u h√¨nh
    config = load_config()
    
    # T·ª± ƒë·ªông ki·ªÉm tra c·∫≠p nh·∫≠t n·∫øu ƒë∆∞·ª£c b·∫≠t
    if config.get("auto_check_update", False):
        current_time = time.time()
        last_check = config.get("last_check_update", 0)
        
        # Ki·ªÉm tra c·∫≠p nh·∫≠t m·ªói 24 gi·ªù
        if current_time - last_check > 86400:  # 24 gi·ªù = 86400 gi√¢y
            if check_internet_connection():
                print(f"{xanh_la}ƒêang t·ª± ƒë·ªông ki·ªÉm tra c·∫≠p nh·∫≠t...")
                check_update()
                config["last_check_update"] = current_time
                save_config(config)
    
    # Bi·∫øn ƒë·∫øm l·ªói li√™n ti·∫øp
    consecutive_errors = 0
    max_consecutive_errors = 5
    
    # V√≤ng l·∫∑p ch√≠nh
    while True:
        try:
            banner()
            
            # Hi·ªÉn th·ªã tool ƒë∆∞·ª£c s·ª≠ d·ª•ng g·∫ßn ƒë√¢y n·∫øu c√≥
            last_tool = config.get("last_used_tool")
            if last_tool and last_tool in TOOLS:
                print(f"{xam}G·∫ßn ƒë√¢y: {TOOLS[last_tool]['name']}")
            
            try:
                choice = input(f"{vua}Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: {xanhnhat}").strip()
            except EOFError:
                print(f"\n{vang}ƒê√£ k·∫øt th√∫c input. Tho√°t ch∆∞∆°ng tr√¨nh.")
                log_activity("Tho√°t ch∆∞∆°ng tr√¨nh (EOFError)")
                sys.exit(0)

            # Validate input
            if not choice:
                print(f"{vang}Vui l√≤ng nh·∫≠p m·ªôt l·ª±a ch·ªçn.")
                time.sleep(1)
                continue
            
            # Reset consecutive errors khi c√≥ input h·ª£p l·ªá
            consecutive_errors = 0

            # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng cho c√°c t√πy ch·ªçn c·∫ßn m·∫°ng
            if choice in TOOLS or choice == "3":
                if not check_internet_connection():
                    print(f"{do}Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng! Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi.")
                    loading_animation(2, "ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i")
                    continue

            # X·ª≠ l√Ω c√°c l·ª±a ch·ªçn
            if choice in TOOLS:
                tool = TOOLS[choice]
                print(f"{xanh_la}ƒêang kh·ªüi ƒë·ªông {tool['name']}...")
                
                if run_from_github(tool["file"]):
                    # L∆∞u l·ª±a ch·ªçn g·∫ßn ƒë√¢y
                    config["last_used_tool"] = choice
                    save_config(config)
                    print(f"{xanh_la}Tool {tool['name']} ƒë√£ ch·∫°y xong.")
                else:
                    print(f"{do}Kh√¥ng th·ªÉ ch·∫°y {tool['name']}!")
                
                input(f"{vang}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...")

            elif choice == "3":
                check_update()
                config["last_check_update"] = time.time()
                save_config(config)

            elif choice == "4":
                show_author_info()

            elif choice == "0":
                print_slow(f"{vang}C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng c√¥ng c·ª• c·ªßa Tr·∫ßn ƒê·ª©c Doanh. T·∫°m bi·ªát!")
                loading_animation(1, "ƒêang tho√°t")
                log_activity("Tho√°t ch∆∞∆°ng tr√¨nh")
                sys.exit(0)

            else:
                print(f"{do}L·ª±a ch·ªçn '{choice}' kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 0-8.")
                print(f"{xanh_la}C√°c l·ª±a ch·ªçn h·ª£p l·ªá: {', '.join(list(TOOLS.keys()) + ['0', '3', '4'])}")
                time.sleep(2)
                
        except KeyboardInterrupt:
            print(f"\n{vang}B·∫°n c√≥ mu·ªën tho√°t ch∆∞∆°ng tr√¨nh? (y/n): ", end="")
            try:
                confirm = input().strip().lower()
                if confirm in ['y', 'yes', 'c√≥']:
                    print_slow(f"{vang}C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng c√¥ng c·ª• c·ªßa Tr·∫ßn ƒê·ª©c Doanh. T·∫°m bi·ªát!")
                    loading_animation(1, "ƒêang tho√°t")
                    log_activity("Tho√°t ch∆∞∆°ng tr√¨nh (b·ªüi KeyboardInterrupt)")
                    sys.exit(0)
                else:
                    print(f"{xanh_la}Ti·∫øp t·ª•c s·ª≠ d·ª•ng...")
            except (KeyboardInterrupt, EOFError):
                print(f"\n{vang}ƒê√£ tho√°t.")
                sys.exit(0)
            except Exception:
                continue
                
        except EOFError:
            print(f"\n{vang}ƒê√£ k·∫øt th√∫c input. Tho√°t ch∆∞∆°ng tr√¨nh.")
            log_activity("Tho√°t ch∆∞∆°ng tr√¨nh (EOFError)")
            sys.exit(0)
                
        except Exception as e:
            consecutive_errors += 1
            error_msg = f"L·ªói kh√¥ng mong mu·ªën trong menu ch√≠nh: {str(e)}"
            print(f"{do}{error_msg}")
            log_error(error_msg)
            
            if consecutive_errors >= max_consecutive_errors:
                print(f"{do}ƒê√£ x·∫£y ra {max_consecutive_errors} l·ªói li√™n ti·∫øp. Tho√°t ch∆∞∆°ng tr√¨nh ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n.")
                log_error(f"Tho√°t do qu√° nhi·ªÅu l·ªói li√™n ti·∫øp: {consecutive_errors}")
                sys.exit(1)
            
            print(f"{vang}ƒêang kh·ªüi ƒë·ªông l·∫°i menu... (L·ªói th·ª© {consecutive_errors}/{max_consecutive_errors})")
            time.sleep(2)

# ===== Ki·ªÉm tra v√† b·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh =====
if __name__ == "__main__":
    try:
        # Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c logs
        create_logs_dir()
        
        # Ghi log b·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh
        log_activity("Kh·ªüi ƒë·ªông ch∆∞∆°ng tr√¨nh")
        
        print(f"{xanh_la}ƒêang kh·ªüi ƒë·ªông c√¥ng c·ª•...")
        loading_animation(2, "Kh·ªüi ƒë·ªông")
        
        # Ki·ªÉm tra phi√™n b·∫£n Python
        if sys.version_info < (3, 6):
            print(f"{do}C·∫£nh b√°o: Ch∆∞∆°ng tr√¨nh y√™u c·∫ßu Python 3.6 tr·ªü l√™n ƒë·ªÉ ho·∫°t ƒë·ªông t·ªët nh·∫•t.")
            print(f"{do}Phi√™n b·∫£n hi·ªán t·∫°i: {sys.version}")
            time.sleep(3)
        else:
            print(f"{xanh_la}Python version: {sys.version.split()[0]} ‚úì")
        
        # Ki·ªÉm tra v√† c√†i ƒë·∫∑t dependencies
        if not check_and_install_dependencies():
            print(f"{do}Kh√¥ng th·ªÉ c√†i ƒë·∫∑t c√°c module c·∫ßn thi·∫øt!")
            print(f"{vang}Vui l√≤ng c√†i ƒë·∫∑t th·ªß c√¥ng: pip install requests")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c (c√≥ th·ªÉ g·∫∑p l·ªói)...")
        
        # Ki·ªÉm tra quy·ªÅn ghi file
        try:
            test_file = "test_write.tmp"
            with open(test_file, "w") as f:
                f.write("test")
            os.remove(test_file)
            print(f"{xanh_la}Quy·ªÅn ghi file: ‚úì")
        except Exception:
            print(f"{vang}C·∫£nh b√°o: C√≥ th·ªÉ kh√¥ng c√≥ quy·ªÅn ghi file trong th∆∞ m·ª•c hi·ªán t·∫°i")
        
        # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ban ƒë·∫ßu
        if check_internet_connection():
            print(f"{xanh_la}K·∫øt n·ªëi m·∫°ng: ‚úì")
        else:
            print(f"{vang}C·∫£nh b√°o: Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng - m·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông")
        
        print(f"{xanh_la}Kh·ªüi ƒë·ªông ho√†n t·∫•t!")
        time.sleep(1)
        
        # B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh ch√≠nh
        main()
        
    except KeyboardInterrupt:
        print(f"\n{vang}ƒê√£ tho√°t b·ªüi ng∆∞·ªùi d√πng.")
        log_activity("Tho√°t ch∆∞∆°ng tr√¨nh (b·ªüi KeyboardInterrupt trong startup)")
        sys.exit(0)
        
    except Exception as e:
        error_msg = f"L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh kh·ªüi ƒë·ªông: {str(e)}"
        print(f"{do}{error_msg}")
        log_error(error_msg)
        
        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ l·ªói
        try:
            import traceback
            traceback_info = traceback.format_exc()
            log_error(f"Traceback: {traceback_info}")
            print(f"{xam}Chi ti·∫øt l·ªói ƒë√£ ƒë∆∞·ª£c ghi v√†o logs/error_log.txt")
        except Exception:
            print(f"{do}Kh√¥ng th·ªÉ ghi chi ti·∫øt l·ªói")
            
        print(f"\n{vang}C√°c b∆∞·ªõc kh·∫Øc ph·ª•c c√≥ th·ªÉ:")
        print(f"{trang}- Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng")
        print(f"{trang}- C·∫≠p nh·∫≠t Python l√™n phi√™n b·∫£n m·ªõi nh·∫•t")
        print(f"{trang}- C√†i ƒë·∫∑t l·∫°i: pip install requests")
        print(f"{trang}- Ch·∫°y v·ªõi quy·ªÅn Administrator/sudo")
        
        input(f"\n{vang}Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        sys.exit(1)